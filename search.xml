<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>cva6架构概述</title>
      <link href="sazc-tech-notes/cva6-analysis-notes/cva6-jia-gou-gai-shu/"/>
      <url>sazc-tech-notes/cva6-analysis-notes/cva6-jia-gou-gai-shu/</url>
      
        <content type="html"><![CDATA[<p><strong>草稿阶段，持续更新！！！</strong></p><h2 id="本系列文章的目的"><a href="#本系列文章的目的" class="headerlink" title="本系列文章的目的"></a>本系列文章的目的</h2><ul><li><a href="https://cva6.readthedocs.io/en/latest/intro.html">cva6文档</a>甚少，依靠源码与仿真工具学习效率低；</li><li>个人学习总结记录；</li><li>希望可以找到一同交流学习的小伙伴，对cva6进行改进，改善它的IPC。</li></ul><p>注：本文仅是个人感悟梳理，细节内容需要自行查阅<strong>源码</strong>、《<strong>计算机组成与设计-硬件/软件接口</strong>》、《<strong>计算机体系结构-量化研究方法</strong>》、相关wiki博客，方可领悟CPU体系结构的精髓，本文仅是小小的总结而已，内容较为单薄！</p><h2 id="cva6简介"><a href="#cva6简介" class="headerlink" title="cva6简介"></a>cva6简介</h2><p>cva6是一颗具备<strong>6级流水</strong>、<strong>单发射</strong>、<strong>顺序执行</strong>的<strong>64bit RISC-V</strong> CPU，不仅实现了<strong>RV64IMAFDC</strong>（RV64GC）指令，也实现了RISC-V三种特权等级，因此具备运行<a href="https://zh.wikipedia.org/wiki/%E7%B1%BBUnix%E7%B3%BB%E7%BB%9F"><strong>类Unix系统</strong></a>的能力。</p><p><img src="/sazc-tech-notes/cva6-analysis-notes/cva6-jia-gou-gai-shu/cva6%E6%9E%B6%E6%9E%84.png" alt="cva6架构概览图"><br>注：目前官方的图没有更新到最新的主线，有细微的差别。</p><p><strong>cva6特性概览</strong></p><ul><li><strong>RV64GC</strong><ul><li>实现了RV64IMAFDC，即支持整数指令I、整数乘除M、单精度浮点F、双精度浮点D、原子指令A、压缩指令C。一个可以运行的RISC-V处理器仅支持整数指令集I即可，其他均为可选的模块。</li></ul></li><li><strong>6级流水</strong><ul><li>6个流水阶段主要划分为<strong>PC Generation—PC生成阶段</strong>、<strong>Instruction Fetch—指令获取阶段</strong>、<strong>Instruction Decode—指令译码阶段</strong>、<strong>Issue—指令发射阶段</strong>、<strong>Execute—指令执行阶段</strong>、<strong>Commit—指令提交阶段</strong>。</li></ul></li><li><strong>流水线的动态调度</strong><ul><li><strong>Scoreboard</strong>：计分板技术，起源于1965年交付的CDC6000，记录并避免WAW、WAR、RAW数据依赖性，通过动态调度流水线的方式，实现乱序执行，提高流水线效率；</li><li><strong>Register renaming</strong>：寄存器重命名，解决数据依赖性问题，支持乱序执行，但cva6暂未完全实现。</li></ul></li><li><strong>动态分支预测</strong><ul><li><strong>BTB</strong>：branch target buffer；</li><li><strong>BHT</strong>：branch history table 基于2bit饱和计数器；</li><li><strong>RAS</strong>：return address stack。</li></ul></li><li><strong>Linux Boot</strong><ul><li>实现了RISC-V的三种特权模式，分别是<strong>机器模式M</strong>-Machine Mode、<strong>监督模式S</strong>-Supervisor Mode、<strong>用户模式U</strong>-User Mode；</li><li>具备ITLB、DTLB、PTW实现虚拟地址到物理地址的快速翻译；</li><li>具备可灵活配置的4路组相连L1ICache与L1DCache。</li></ul></li><li><strong>官方基于22nm-FDSOI流片，运行频率可达1.7GHZ</strong></li><li><strong>FPGA Emulation</strong><ul><li>官方支持在Digilent的<a href="https://reference.digilentinc.com/programmable-logic/genesys-2/reference-manual?redirect=1">Genesys 2</a>、Xilinx的kc705、Xilinx的vc707板卡上运行cva6，并启动Linux；</li><li>在容量足够的情况下，其他板卡原则上也可以支持，不过需要少量的移植工作。</li></ul></li></ul><p>下图是基于cva6的SOC组成，可在FPGA上运行。</p><div align="center" style="zoom:70%"><img src="/sazc-tech-notes/cva6-analysis-notes/cva6-jia-gou-gai-shu/fpga_bd.png"></div><h2 id="PC生成阶段-PC-Generation"><a href="#PC生成阶段-PC-Generation" class="headerlink" title="PC生成阶段-PC Generation"></a>PC生成阶段-PC Generation</h2><p>PC生成阶段是为了产生下一个将要获取指令的指针地址，PC值的来源主要有以下几个部分</p><ol><li><strong>Branch Predict</strong><ul><li>通过当前的PC指针利用动态分支预测模块BHT与静态分支预测来判断是否跳转；</li><li>通过BTB来记录历史跳转地址。</li></ul></li><li><strong>Default assignment</strong><ul><li>默认是PC + 4。</li></ul></li><li><strong>replay</strong><ul><li>缓存分支预测地址的FIFO已满，暂停取指。</li></ul></li><li><strong>Mis-prediction</strong><ul><li>分支预测错误，从执行阶段计算的地址开始取指。</li></ul></li><li><strong>Return from environment call</strong><ul><li>遇到从环境调用中返回指令mret、sret、dret，则下个取指地址分别为CSR寄存器mepc、sepc、dpc中记录的数值。</li></ul></li><li><strong>Exception/Interrupt</strong><ul><li>异常和中断导致的跳转，跳转地址依据特权等级以及mtvec、stvec等计算。</li></ul></li><li><strong>Pipeline Flush because of CSR side effects</strong><ul><li>由于一些特殊的指令比如同步内存和I/O的fence指令会导致流水线刷新，从提交的指令地址 + 4 重新取指。</li></ul></li><li><strong>Debug</strong><ul><li>Debug放在组合逻辑赋值的最后，因此具有最高的权限，启动debug之后会进入一个硬编码的地址，cva6是<code>64'h800</code>。</li></ul></li></ol><p>具体来说PC生成阶段相关代码示例如下</p><pre class="line-numbers language-verilog" data-language="verilog"><code class="language-verilog"><span class="token comment">// -------------------</span><span class="token comment">// Next PC</span><span class="token comment">// -------------------</span><span class="token comment">// next PC (NPC) can come from (in order of precedence):</span><span class="token comment">// 0. Default assignment/replay instruction</span><span class="token comment">// 1. Branch Predict taken</span><span class="token comment">// 2. Control flow change request (misprediction)</span><span class="token comment">// 3. Return from environment call</span><span class="token comment">// 4. Exception/Interrupt</span><span class="token comment">// 5. Pipeline Flush because of CSR side effects</span><span class="token comment">// Mis-predict handling is a little bit different</span><span class="token comment">// select PC a.k.a PC Gen</span><span class="token important">always_comb </span><span class="token keyword">begin</span> <span class="token punctuation">:</span> npc_select    <span class="token keyword">automatic</span> <span class="token keyword">logic</span> <span class="token punctuation">[</span>riscv<span class="token punctuation">:</span><span class="token punctuation">:</span>VLEN<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> fetch_address<span class="token punctuation">;</span>    <span class="token comment">// check whether we come out of reset</span>    <span class="token comment">// this is a workaround. some tools have issues</span>    <span class="token comment">// having boot_addr_i in the asynchronous</span>    <span class="token comment">// reset assignment to npc_q, even though</span>    <span class="token comment">// boot_addr_i will be assigned a constant</span>    <span class="token comment">// on the top-level.</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>npc_rst_load_q<span class="token punctuation">)</span> <span class="token keyword">begin</span>    npc_d         <span class="token operator">=</span> boot_addr_i<span class="token punctuation">;</span>    fetch_address <span class="token operator">=</span> boot_addr_i<span class="token punctuation">;</span>    <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token keyword">begin</span>    fetch_address    <span class="token operator">=</span> npc_q<span class="token punctuation">;</span>    <span class="token comment">// keep stable by default</span>    npc_d            <span class="token operator">=</span> npc_q<span class="token punctuation">;</span>    <span class="token keyword">end</span>    <span class="token comment">// 0. Branch Prediction</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>bp_valid<span class="token punctuation">)</span> <span class="token keyword">begin</span>    fetch_address <span class="token operator">=</span> predict_address<span class="token punctuation">;</span>    npc_d <span class="token operator">=</span> predict_address<span class="token punctuation">;</span>    <span class="token keyword">end</span>    <span class="token comment">// 1. Default assignment</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>if_ready<span class="token punctuation">)</span> npc_d <span class="token operator">=</span> <span class="token operator">{</span>fetch_address<span class="token punctuation">[</span>riscv<span class="token punctuation">:</span><span class="token punctuation">:</span>VLEN<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">2'b0</span><span class="token operator">}</span>  <span class="token operator">+</span> <span class="token number">'h4</span><span class="token punctuation">;</span>    <span class="token comment">// 2. Replay instruction fetch</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>replay<span class="token punctuation">)</span> npc_d <span class="token operator">=</span> replay_addr<span class="token punctuation">;</span>    <span class="token comment">// 3. Control flow change request</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>is_mispredict<span class="token punctuation">)</span> npc_d <span class="token operator">=</span> resolved_branch_i<span class="token punctuation">.</span>target_address<span class="token punctuation">;</span>    <span class="token comment">// 4. Return from environment call</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>eret_i<span class="token punctuation">)</span> npc_d <span class="token operator">=</span> epc_i<span class="token punctuation">;</span>    <span class="token comment">// 5. Exception/Interrupt</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ex_valid_i<span class="token punctuation">)</span> npc_d <span class="token operator">=</span> trap_vector_base_i<span class="token punctuation">;</span>    <span class="token comment">// 6. Pipeline Flush because of CSR side effects</span>    <span class="token comment">// On a pipeline flush start fetching from the next address</span>    <span class="token comment">// of the instruction in the commit stage</span>    <span class="token comment">// we came here from a flush request of a CSR instruction or AMO,</span>    <span class="token comment">// as CSR or AMO instructions do not exist in a compressed form</span>    <span class="token comment">// we can unconditionally do PC + 4 here</span>    <span class="token comment">// TODO(zarubaf) This adder can at least be merged with the one in the csr_regfile stage</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>set_pc_commit_i<span class="token punctuation">)</span> npc_d <span class="token operator">=</span> pc_commit_i <span class="token operator">+</span> <span class="token operator">{{</span>riscv<span class="token punctuation">:</span><span class="token punctuation">:</span>VLEN<span class="token operator">-</span><span class="token number">3</span><span class="token operator">{</span><span class="token number">1'b0</span><span class="token operator">}}</span><span class="token punctuation">,</span> <span class="token number">3'b100</span><span class="token operator">}</span><span class="token punctuation">;</span>    <span class="token comment">// 7. Debug</span>    <span class="token comment">// enter debug on a hard-coded base-address</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>set_debug_pc_i<span class="token punctuation">)</span> npc_d <span class="token operator">=</span> ArianeCfg<span class="token punctuation">.</span>DmBaseAddress<span class="token punctuation">[</span>riscv<span class="token punctuation">:</span><span class="token punctuation">:</span>VLEN<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> dm<span class="token punctuation">:</span><span class="token punctuation">:</span>HaltAddress<span class="token punctuation">[</span>riscv<span class="token punctuation">:</span><span class="token punctuation">:</span>VLEN<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    icache_dreq_o<span class="token punctuation">.</span>vaddr <span class="token operator">=</span> fetch_address<span class="token punctuation">;</span><span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>PC生成阶段逻辑框图如下</p><div align="center" style="zoom:80%"><img src="/sazc-tech-notes/cva6-analysis-notes/cva6-jia-gou-gai-shu/PC生成阶段逻辑框图.png"></div><p>cva6的分支预测是由<strong>动态分支预测与静态分支预测结合</strong>而成。<br><br>动态分支预测采用的是<strong>2bit饱和计数器</strong>（saturating counter）或者称<strong>双模态预测器</strong>（bimodal predictor），它是一种有4个状态的状态机：</p><ul><li><strong>强不选择（Strongly not taken）</strong></li><li><strong>弱不选择（Weakly not taken）</strong></li><li><strong>弱选择（Weakly taken）</strong></li><li><strong>强选择（Strongly taken）</strong></li></ul><p>2bit饱和计数器状态转移图如下</p><div align="center" style="zoom:70%"><img src="/sazc-tech-notes/cva6-analysis-notes/cva6-jia-gou-gai-shu/2bit饱和计数器状态转移图.png"></div><p>如下是具有<strong>4096-entry</strong>与<strong>infinite-entry</strong>的2bit饱和计数器的动态分支预测在SPEC89的Miss统计直方图，为节省逻辑资源cva6以分支预测准确率为代价，仅默认使用<strong>128-entry</strong>。</p><div align="center" style="zoom:70%"><img src="/sazc-tech-notes/cva6-analysis-notes/cva6-jia-gou-gai-shu/无限entry的miss概率.png"></div><p>最初该分支预测方案在Intel Pentium处理器中使用。如此古老的动态分支预测的在现在看来稍微差些，但随后的动态分支预测改进不少是基于此的，因此作为学习模板足够了。更高级的分级预测方案有两级自适应预测器、局部分支预测、overriding分支预测、神经分支预测器等方案，进一步提高预测准确率。<br><br><br><br>当没有有效动态分支预测数据的时候，使用<strong>默认向前跳转</strong>的“静态分支预测”，如下是cva6分支预测部分代码。</p><pre class="line-numbers language-verilog" data-language="verilog"><code class="language-verilog"><span class="token important">always_comb </span><span class="token keyword">begin</span>    taken_rvi_cf <span class="token operator">=</span> '<span class="token number">0</span><span class="token punctuation">;</span>    taken_rvc_cf <span class="token operator">=</span> '<span class="token number">0</span><span class="token punctuation">;</span>    predict_address <span class="token operator">=</span> '<span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> INSTR_PER_FETCH<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>  cf_type<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> ariane_pkg<span class="token punctuation">:</span><span class="token punctuation">:</span>NoCF<span class="token punctuation">;</span>    ras_push <span class="token operator">=</span> <span class="token number">1'b0</span><span class="token punctuation">;</span>    ras_pop <span class="token operator">=</span> <span class="token number">1'b0</span><span class="token punctuation">;</span>    ras_update <span class="token operator">=</span> '<span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">// lower most prediction gets precedence</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> INSTR_PER_FETCH <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>    <span class="token keyword">unique</span> <span class="token keyword">case</span> <span class="token punctuation">(</span><span class="token operator">{</span>is_branch<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> is_return<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> is_jump<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> is_jalr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">}</span><span class="token punctuation">)</span>        <span class="token number">4'b0000</span><span class="token punctuation">:</span><span class="token punctuation">;</span> <span class="token comment">// regular instruction e.g.: no branch</span>        <span class="token comment">// unconditional jump to register, we need the BTB to resolve this</span>        <span class="token number">4'b0001</span><span class="token punctuation">:</span> <span class="token keyword">begin</span>        ras_pop <span class="token operator">=</span> <span class="token number">1'b0</span><span class="token punctuation">;</span>        ras_push <span class="token operator">=</span> <span class="token number">1'b0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>btb_prediction_shifted<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>valid<span class="token punctuation">)</span> <span class="token keyword">begin</span>            predict_address <span class="token operator">=</span> btb_prediction_shifted<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>target_address<span class="token punctuation">;</span>            cf_type<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> ariane_pkg<span class="token punctuation">:</span><span class="token punctuation">:</span>JumpR<span class="token punctuation">;</span>        <span class="token keyword">end</span>        <span class="token keyword">end</span>        <span class="token comment">// its an unconditional jump to an immediate</span>        <span class="token number">4'b0010</span><span class="token punctuation">:</span> <span class="token keyword">begin</span>        ras_pop <span class="token operator">=</span> <span class="token number">1'b0</span><span class="token punctuation">;</span>        ras_push <span class="token operator">=</span> <span class="token number">1'b0</span><span class="token punctuation">;</span>        taken_rvi_cf<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> rvi_jump<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        taken_rvc_cf<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> rvc_jump<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        cf_type<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> ariane_pkg<span class="token punctuation">:</span><span class="token punctuation">:</span>Jump<span class="token punctuation">;</span>        <span class="token keyword">end</span>        <span class="token comment">// return</span>        <span class="token number">4'b0100</span><span class="token punctuation">:</span> <span class="token keyword">begin</span>        <span class="token comment">// make sure to only alter the RAS if we actually consumed the instruction</span>        ras_pop <span class="token operator">=</span> ras_predict<span class="token punctuation">.</span>valid <span class="token operator">&amp;</span> instr_queue_consumed<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        ras_push <span class="token operator">=</span> <span class="token number">1'b0</span><span class="token punctuation">;</span>        predict_address <span class="token operator">=</span> ras_predict<span class="token punctuation">.</span>ra<span class="token punctuation">;</span>        cf_type<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> ariane_pkg<span class="token punctuation">:</span><span class="token punctuation">:</span>Return<span class="token punctuation">;</span>        <span class="token keyword">end</span>        <span class="token comment">// branch prediction</span>        <span class="token number">4'b1000</span><span class="token punctuation">:</span> <span class="token keyword">begin</span>        ras_pop <span class="token operator">=</span> <span class="token number">1'b0</span><span class="token punctuation">;</span>        ras_push <span class="token operator">=</span> <span class="token number">1'b0</span><span class="token punctuation">;</span>        <span class="token comment">// if we have a valid dynamic prediction use it</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>bht_prediction_shifted<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>valid<span class="token punctuation">)</span> <span class="token keyword">begin</span>            taken_rvi_cf<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> rvi_branch<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;</span> bht_prediction_shifted<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>taken<span class="token punctuation">;</span>            taken_rvc_cf<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> rvc_branch<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;</span> bht_prediction_shifted<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>taken<span class="token punctuation">;</span>        <span class="token comment">// otherwise default to static prediction</span>        <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token keyword">begin</span>            <span class="token comment">// set if immediate is negative - static prediction</span>            taken_rvi_cf<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> rvi_branch<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;</span> rvi_imm<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>riscv<span class="token punctuation">:</span><span class="token punctuation">:</span>VLEN<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            taken_rvc_cf<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> rvc_branch<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;</span> rvc_imm<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>riscv<span class="token punctuation">:</span><span class="token punctuation">:</span>VLEN<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">end</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>taken_rvi_cf<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">||</span> taken_rvc_cf<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> cf_type<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> ariane_pkg<span class="token punctuation">:</span><span class="token punctuation">:</span>Branch<span class="token punctuation">;</span>        <span class="token keyword">end</span>        <span class="token keyword">default</span><span class="token punctuation">:</span><span class="token punctuation">;</span>        <span class="token comment">// default: $error("Decoded more than one control flow");</span>    <span class="token keyword">endcase</span>        <span class="token comment">// if this instruction, in addition, is a call, save the resulting address</span>        <span class="token comment">// but only if we actually consumed the address</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>is_call<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>        ras_push <span class="token operator">=</span> instr_queue_consumed<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        ras_update <span class="token operator">=</span> addr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">(</span>rvc_call<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token number">2</span> <span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">end</span>        <span class="token comment">// calculate the jump target address</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>taken_rvc_cf<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">||</span> taken_rvi_cf<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>        predict_address <span class="token operator">=</span> addr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">(</span>taken_rvc_cf<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">?</span> rvc_imm<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token punctuation">:</span> rvi_imm<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">end</span>    <span class="token keyword">end</span><span class="token keyword">end</span><span class="token comment">// or reduce struct</span><span class="token important">always_comb </span><span class="token keyword">begin</span>    bp_valid <span class="token operator">=</span> <span class="token number">1'b0</span><span class="token punctuation">;</span>    <span class="token comment">// BP cannot be valid if we have a return instruction and the RAS is not giving a valid address</span>    <span class="token comment">// Check that we encountered a control flow and that for a return the RAS</span>    <span class="token comment">// contains a valid prediction.</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> INSTR_PER_FETCH<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> bp_valid <span class="token operator">|=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>cf_type<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> NoCF <span class="token operator">&amp;</span> cf_type<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> Return<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>cf_type<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> Return<span class="token punctuation">)</span> <span class="token operator">&amp;</span> ras_predict<span class="token punctuation">.</span>valid<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="指令获取阶段-Instruction-Fetch"><a href="#指令获取阶段-Instruction-Fetch" class="headerlink" title="指令获取阶段-Instruction Fetch"></a>指令获取阶段-Instruction Fetch</h2><p>指令获取阶段涉及到一个相对复杂的主题，主要涉及到如下几个模块</p><ul><li><strong>TLB</strong>： translation lookaside buffer，转换后备缓冲区；</li><li><strong>L1Icache</strong>：L1指令缓存；</li><li><strong>DRAM</strong></li></ul><h3 id="转换后备缓冲区-TLB"><a href="#转换后备缓冲区-TLB" class="headerlink" title="转换后备缓冲区-TLB"></a>转换后备缓冲区-TLB</h3><p>TLB与CSR寄存器中的<strong>satp</strong> - Supervisor Address Translation and Protection Register密切相关，字面意思该寄存器的主要功能是<strong>监管者地址转换和保护，控制分页系统</strong>。该寄存器的组成如下</p><div align="center" style="zoom:50%"><img src="/sazc-tech-notes/cva6-analysis-notes/cva6-jia-gou-gai-shu/satp寄存器组成.png"></div><p>下图示例是Sv32模式地址翻译流程</p><div align="center" style="zoom:80%"><img src="/sazc-tech-notes/cva6-analysis-notes/cva6-jia-gou-gai-shu/Sv32模式翻译流程.png"></div><p>cva6默认采用的<strong>Sv39</strong>，与Sv32不同的是，其采用的是<strong>3级页表</strong>。Sv39 的 <strong>512GiB</strong> 地址空间划分为$2^9$个 GiB 大小的 gigapages, 每个 gigapages 被进一步划分为$2^9$个 megapages，每个 megapages 再进一步分为$2^9$个 4KiB 大小的 base pages。在Sv39中这些 gigapages 大小为 2 MiB,比 Sv32 中略小。</p><p>由于本部分较为复杂，而且测试程序默认屏蔽地址翻译，即PC的虚拟地址与物理地址相同，所以本部分暂且搁置，当做一个黑盒子来对待。</p><h3 id="L1指令缓存-L1Icache"><a href="#L1指令缓存-L1Icache" class="headerlink" title="L1指令缓存-L1Icache"></a>L1指令缓存-L1Icache</h3><p>如对Cache不了解的小伙伴，可以移步查看这位博主的文章：<a href="https://zhuanlan.zhihu.com/p/102293437">Cache的基本原理</a>。cva6核心部分仅具有L1Cache，为了提高流水线效率，L1Cache又分为ICache、DCache。L1ICache的默认配置是：</p><ul><li><strong>cache size</strong>：16Kib</li><li><strong>cache lines</strong>：128bit</li><li><strong>Associativity</strong>：Four-way set</li><li><strong>Replacement policies</strong>：使用LFSR进行随机替换</li></ul><p>cva6<strong>仅具有L1Cache</strong>，但结合Princeton开源的<a href="https://github.com/PrincetonUniversity/openpiton">OpenPiton</a>，可以拓展L2Cache，下图是对应的逻辑简图</p><div align="center" style="zoom:100%"><img src="/sazc-tech-notes/cva6-analysis-notes/cva6-jia-gou-gai-shu/ariane+OpenPiton.png"></div><br>这里多说下，cache size 与 Associativity 对 cache Miss rate的影响如下图所示，可以有个大概的认知：Cache容量越大Miss的概率越小，提高相连度可以有效的改善Miss rate(好像是废话hhh)。<br><div align="center" style="zoom:35%"><img src="/sazc-tech-notes/cva6-analysis-notes/cva6-jia-gou-gai-shu/cache%20size%20与%20Associativity%20对%20cache%20Miss%20rate的影响.png"></div><h2 id="指令译码阶段-Instruction-Decode"><a href="#指令译码阶段-Instruction-Decode" class="headerlink" title="指令译码阶段-Instruction Decode"></a>指令译码阶段-Instruction Decode</h2><p>指令译码是处理器后端的第一个流水阶段。该阶段的主要目标是提取IF阶段的获得的指令，对其进行解码，并将其交给发布阶段。指令译码器的设计主要是依据如下的RISC-V指令格式，然后利用组合逻辑对对应格式的指令使用与之匹配的译码方案。</p><div align="center" style="zoom:40%"><img src="/sazc-tech-notes/cva6-analysis-notes/cva6-jia-gou-gai-shu/RISCV指令格式.png"></div><p>一条指令<code>li ra,15</code>解码使用的代码如下</p><pre class="line-numbers language-verilog" data-language="verilog"><code class="language-verilog"><span class="token comment">// --------------------------</span><span class="token comment">// Reg-Reg Operations</span><span class="token comment">// --------------------------</span>riscv<span class="token punctuation">:</span><span class="token punctuation">:</span>OpcodeOp<span class="token punctuation">:</span> <span class="token keyword">begin</span>    <span class="token comment">// --------------------------------------------</span>    <span class="token comment">// Vectorial Floating-Point Reg-Reg Operations</span>    <span class="token comment">// --------------------------------------------</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>instr<span class="token punctuation">.</span>rvftype<span class="token punctuation">.</span>funct2 <span class="token operator">==</span> <span class="token number">2'b10</span><span class="token punctuation">)</span> <span class="token keyword">begin</span> <span class="token comment">// Prefix 10 for all Xfvec ops</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">end</span>    <span class="token comment">// ---------------------------</span>    <span class="token comment">// Integer Reg-Reg Operations</span>    <span class="token comment">// ---------------------------</span>    <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token keyword">begin</span>        instruction_o<span class="token punctuation">.</span>fu  <span class="token operator">=</span> <span class="token punctuation">(</span>instr<span class="token punctuation">.</span>rtype<span class="token punctuation">.</span>funct7 <span class="token operator">==</span> <span class="token number">7'b000_0001</span><span class="token punctuation">)</span> <span class="token operator">?</span> MULT <span class="token punctuation">:</span> ALU<span class="token punctuation">;</span>        instruction_o<span class="token punctuation">.</span>rs1 <span class="token operator">=</span> instr<span class="token punctuation">.</span>rtype<span class="token punctuation">.</span>rs1<span class="token punctuation">;</span>        instruction_o<span class="token punctuation">.</span>rs2 <span class="token operator">=</span> instr<span class="token punctuation">.</span>rtype<span class="token punctuation">.</span>rs2<span class="token punctuation">;</span>        instruction_o<span class="token punctuation">.</span>rd  <span class="token operator">=</span> instr<span class="token punctuation">.</span>rtype<span class="token punctuation">.</span>rd<span class="token punctuation">;</span>        <span class="token keyword">unique</span> <span class="token keyword">case</span> <span class="token punctuation">(</span><span class="token operator">{</span>instr<span class="token punctuation">.</span>rtype<span class="token punctuation">.</span>funct7<span class="token punctuation">,</span> instr<span class="token punctuation">.</span>rtype<span class="token punctuation">.</span>funct3<span class="token operator">}</span><span class="token punctuation">)</span>            <span class="token operator">{</span><span class="token number">7'b000_0000</span><span class="token punctuation">,</span> <span class="token number">3'b000</span><span class="token operator">}</span><span class="token punctuation">:</span> instruction_o<span class="token punctuation">.</span>op <span class="token operator">=</span> ariane_pkg<span class="token punctuation">:</span><span class="token punctuation">:</span>ADD<span class="token punctuation">;</span>   <span class="token comment">// Add</span>            <span class="token operator">{</span><span class="token number">7'b010_0000</span><span class="token punctuation">,</span> <span class="token number">3'b000</span><span class="token operator">}</span><span class="token punctuation">:</span> instruction_o<span class="token punctuation">.</span>op <span class="token operator">=</span> ariane_pkg<span class="token punctuation">:</span><span class="token punctuation">:</span>SUB<span class="token punctuation">;</span>   <span class="token comment">// Sub</span>            <span class="token operator">{</span><span class="token number">7'b000_0000</span><span class="token punctuation">,</span> <span class="token number">3'b010</span><span class="token operator">}</span><span class="token punctuation">:</span> instruction_o<span class="token punctuation">.</span>op <span class="token operator">=</span> ariane_pkg<span class="token punctuation">:</span><span class="token punctuation">:</span>SLTS<span class="token punctuation">;</span>  <span class="token comment">// Set Lower Than</span>            <span class="token operator">{</span><span class="token number">7'b000_0000</span><span class="token punctuation">,</span> <span class="token number">3'b011</span><span class="token operator">}</span><span class="token punctuation">:</span> instruction_o<span class="token punctuation">.</span>op <span class="token operator">=</span> ariane_pkg<span class="token punctuation">:</span><span class="token punctuation">:</span>SLTU<span class="token punctuation">;</span>  <span class="token comment">// Set Lower Than Unsigned</span>            <span class="token operator">{</span><span class="token number">7'b000_0000</span><span class="token punctuation">,</span> <span class="token number">3'b100</span><span class="token operator">}</span><span class="token punctuation">:</span> instruction_o<span class="token punctuation">.</span>op <span class="token operator">=</span> ariane_pkg<span class="token punctuation">:</span><span class="token punctuation">:</span>XORL<span class="token punctuation">;</span>  <span class="token comment">// Xor</span>            <span class="token operator">{</span><span class="token number">7'b000_0000</span><span class="token punctuation">,</span> <span class="token number">3'b110</span><span class="token operator">}</span><span class="token punctuation">:</span> instruction_o<span class="token punctuation">.</span>op <span class="token operator">=</span> ariane_pkg<span class="token punctuation">:</span><span class="token punctuation">:</span>ORL<span class="token punctuation">;</span>   <span class="token comment">// Or</span>            <span class="token operator">{</span><span class="token number">7'b000_0000</span><span class="token punctuation">,</span> <span class="token number">3'b111</span><span class="token operator">}</span><span class="token punctuation">:</span> instruction_o<span class="token punctuation">.</span>op <span class="token operator">=</span> ariane_pkg<span class="token punctuation">:</span><span class="token punctuation">:</span>ANDL<span class="token punctuation">;</span>  <span class="token comment">// And</span>            <span class="token operator">{</span><span class="token number">7'b000_0000</span><span class="token punctuation">,</span> <span class="token number">3'b001</span><span class="token operator">}</span><span class="token punctuation">:</span> instruction_o<span class="token punctuation">.</span>op <span class="token operator">=</span> ariane_pkg<span class="token punctuation">:</span><span class="token punctuation">:</span>SLL<span class="token punctuation">;</span>   <span class="token comment">// Shift Left Logical</span>            <span class="token operator">{</span><span class="token number">7'b000_0000</span><span class="token punctuation">,</span> <span class="token number">3'b101</span><span class="token operator">}</span><span class="token punctuation">:</span> instruction_o<span class="token punctuation">.</span>op <span class="token operator">=</span> ariane_pkg<span class="token punctuation">:</span><span class="token punctuation">:</span>SRL<span class="token punctuation">;</span>   <span class="token comment">// Shift Right Logical</span>            <span class="token operator">{</span><span class="token number">7'b010_0000</span><span class="token punctuation">,</span> <span class="token number">3'b101</span><span class="token operator">}</span><span class="token punctuation">:</span> instruction_o<span class="token punctuation">.</span>op <span class="token operator">=</span> ariane_pkg<span class="token punctuation">:</span><span class="token punctuation">:</span>SRA<span class="token punctuation">;</span>   <span class="token comment">// Shift Right Arithmetic</span>            <span class="token comment">// Multiplications</span>            <span class="token operator">{</span><span class="token number">7'b000_0001</span><span class="token punctuation">,</span> <span class="token number">3'b000</span><span class="token operator">}</span><span class="token punctuation">:</span> instruction_o<span class="token punctuation">.</span>op <span class="token operator">=</span> ariane_pkg<span class="token punctuation">:</span><span class="token punctuation">:</span>MUL<span class="token punctuation">;</span>            <span class="token operator">{</span><span class="token number">7'b000_0001</span><span class="token punctuation">,</span> <span class="token number">3'b001</span><span class="token operator">}</span><span class="token punctuation">:</span> instruction_o<span class="token punctuation">.</span>op <span class="token operator">=</span> ariane_pkg<span class="token punctuation">:</span><span class="token punctuation">:</span>MULH<span class="token punctuation">;</span>            <span class="token operator">{</span><span class="token number">7'b000_0001</span><span class="token punctuation">,</span> <span class="token number">3'b010</span><span class="token operator">}</span><span class="token punctuation">:</span> instruction_o<span class="token punctuation">.</span>op <span class="token operator">=</span> ariane_pkg<span class="token punctuation">:</span><span class="token punctuation">:</span>MULHSU<span class="token punctuation">;</span>            <span class="token operator">{</span><span class="token number">7'b000_0001</span><span class="token punctuation">,</span> <span class="token number">3'b011</span><span class="token operator">}</span><span class="token punctuation">:</span> instruction_o<span class="token punctuation">.</span>op <span class="token operator">=</span> ariane_pkg<span class="token punctuation">:</span><span class="token punctuation">:</span>MULHU<span class="token punctuation">;</span>            <span class="token operator">{</span><span class="token number">7'b000_0001</span><span class="token punctuation">,</span> <span class="token number">3'b100</span><span class="token operator">}</span><span class="token punctuation">:</span> instruction_o<span class="token punctuation">.</span>op <span class="token operator">=</span> ariane_pkg<span class="token punctuation">:</span><span class="token punctuation">:</span>DIV<span class="token punctuation">;</span>            <span class="token operator">{</span><span class="token number">7'b000_0001</span><span class="token punctuation">,</span> <span class="token number">3'b101</span><span class="token operator">}</span><span class="token punctuation">:</span> instruction_o<span class="token punctuation">.</span>op <span class="token operator">=</span> ariane_pkg<span class="token punctuation">:</span><span class="token punctuation">:</span>DIVU<span class="token punctuation">;</span>            <span class="token operator">{</span><span class="token number">7'b000_0001</span><span class="token punctuation">,</span> <span class="token number">3'b110</span><span class="token operator">}</span><span class="token punctuation">:</span> instruction_o<span class="token punctuation">.</span>op <span class="token operator">=</span> ariane_pkg<span class="token punctuation">:</span><span class="token punctuation">:</span>REM<span class="token punctuation">;</span>            <span class="token operator">{</span><span class="token number">7'b000_0001</span><span class="token punctuation">,</span> <span class="token number">3'b111</span><span class="token operator">}</span><span class="token punctuation">:</span> instruction_o<span class="token punctuation">.</span>op <span class="token operator">=</span> ariane_pkg<span class="token punctuation">:</span><span class="token punctuation">:</span>REMU<span class="token punctuation">;</span>            <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token keyword">begin</span>                illegal_instr <span class="token operator">=</span> <span class="token number">1'b1</span><span class="token punctuation">;</span>            <span class="token keyword">end</span>        <span class="token keyword">endcase</span>    <span class="token keyword">end</span><span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>该指令解码后的结构体示例如下， 你是否可以把解码内容与相应的汇编编码对应起来呢？</p><div align="center" style="zoom:100%"><img src="/sazc-tech-notes/cva6-analysis-notes/cva6-jia-gou-gai-shu/li-ra-15.png"></div><p>注：本阶段也包含对压缩指令的支持，但本文暂时忽略。</p><h2 id="指令发射阶段-Issue"><a href="#指令发射阶段-Issue" class="headerlink" title="指令发射阶段-Issue"></a>指令发射阶段-Issue</h2><p>指令发射阶段的核心是利用Scoreboard来实现流水线的动态调度。Scoreboard技术在拥有足够的计算单元以及不存在数据冒险时，<strong>允许指令乱序执行</strong>，但cva6目前仅支持<strong>顺序发射、顺序执行、乱序写回、顺序派遣</strong>，因此仅存在三种数据冒险中的两种：<strong>真相关RAW</strong>、<strong>输出相关WAW</strong>。由于cva6是顺序发射与顺序执行的，所以反相关WAR这种数据冒险并不可能存在。</p><p>一条指令的执行可以大概分为4个部分，其分别是</p><ol><li><strong>issue</strong><ul><li>该阶段会检测指令需要读取写入哪些寄存器，即检测WAW与RAW这两种数据冒险，存在冒险时阻塞发射；</li><li>该阶段也检测各个执行单元的状态，当需要的功能单元正忙时阻塞发射。</li></ul></li><li><strong>read operands</strong><ul><li>当指令issue后，不会存在RAW这种真相关的数据冒险，因此按照指令的需求，读取execute阶段所需的各个操作数，准备进行计算;</li><li>本阶段结合Scoreboard运用了转发技术，提高流水线效率；</li><li>本阶段与issue阶段处于同一个指令周期，仅仅是概念上划分为两个阶段。</li></ul></li><li><strong>execute</strong><ul><li>计算单元接收到操作数之后开始执行，结果准备就绪后通知Scoreboard已经完成执行。</li></ul></li><li><strong>write-back</strong><ul><li>因顺序发射的顺序执行特性，故不存在WAR这种反相关的数据冒险，可以<strong>乱序写回</strong>。</li></ul></li></ol><p>这里放个官方的框架图作为本小节的收尾(本图与主线代码有所差异)</p><div align="center" style="zoom:60%"><img src="/sazc-tech-notes/cva6-analysis-notes/cva6-jia-gou-gai-shu/scoreboard.png"></div><h2 id="指令执行阶段-Execute"><a href="#指令执行阶段-Execute" class="headerlink" title="指令执行阶段-Execute"></a>指令执行阶段-Execute</h2><p>指令执行阶段封装了所有必须的功能模块FUs，每个FUs之间没有依赖，独立执行，与发射阶段通过握手进行通信。</p><div align="center" style="zoom:70%"><img src="/sazc-tech-notes/cva6-analysis-notes/cva6-jia-gou-gai-shu/EX_Stage.png"></div><p>功能模块FUs主要包含</p><ul><li><strong>ALU</strong><ul><li>算数逻辑单元ALU可以执行32与64bit加法、减法、移位、比较等计算的模块，一个周期内可完成计算。</li></ul></li><li><strong>Branch Unit</strong><ul><li>分支单元管理条件分支与无条件分支，评估计算Front阶段的预测是否正确，并予以纠正。</li></ul></li><li><strong>CSR Buffer</strong><ul><li>CSR缓冲区的功能是缓存将要读取/写入的CSR寄存器地址。</li></ul></li><li><strong>Multiplier</strong><ul><li>乘法器单元包含所需的乘法与串行除法计算单元。</li></ul></li><li><strong>FPU</strong><ul><li>支持浮点计算指令</li></ul></li><li><strong>Load Store Unit</strong><ul><li>加载储存单元主要服务于数据的加载与存储，但因cva6的多层级缓存与虚拟地址访存特性，需要数据转换后备缓冲区DTLB、硬件页表遍历器PTW、内存管理单元MMU等模块。</li></ul></li></ul><div align="center" style="zoom:60%"><img src="/sazc-tech-notes/cva6-analysis-notes/cva6-jia-gou-gai-shu/LSU_unit.png"></div><div align="center" style="zoom:50%"><img src="/sazc-tech-notes/cva6-analysis-notes/cva6-jia-gou-gai-shu/MMU_Unit.png"></div><h2 id="指令提交阶段-Commit"><a href="#指令提交阶段-Commit" class="headerlink" title="指令提交阶段-Commit"></a>指令提交阶段-Commit</h2><p>提交阶段是cva6的6级流水线的最后一个阶段，功能主要是写CSR寄存器、提交存储以及寄存器的回写。</p>]]></content>
      
      
      
        <tags>
            
            <tag> RISC-V </tag>
            
            <tag> 计算机体系结构 </tag>
            
            <tag> SystemVerilog </tag>
            
            <tag> CPU </tag>
            
            <tag> Linux </tag>
            
            <tag> FPGA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="hello-world/"/>
      <url>hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><p><img src="/hello-world/cva6.png"></p><div class="ds-recent-visitors" data-num-items="39" data-avatar-size="40" id="ds-recent-visitors"></div>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>cva6 Issue stage</title>
      <link href="sazc-tech-notes/cva6-analysis-notes/cva6-issue-stage/"/>
      <url>sazc-tech-notes/cva6-analysis-notes/cva6-issue-stage/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>cva6译码部分</title>
      <link href="sazc-tech-notes/cva6-analysis-notes/cva6-yi-ma-bu-fen/"/>
      <url>sazc-tech-notes/cva6-analysis-notes/cva6-yi-ma-bu-fen/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>cva6取指部分</title>
      <link href="sazc-tech-notes/cva6-analysis-notes/cva6-qu-zhi-bu-fen/"/>
      <url>sazc-tech-notes/cva6-analysis-notes/cva6-qu-zhi-bu-fen/</url>
      
        <content type="html"><![CDATA[<h2 id="leading-zero-counter"><a href="#leading-zero-counter" class="headerlink" title="leading zero counter"></a>leading zero counter</h2><p>现在仍有论文在研究</p><p><a href="https://ieeexplore.ieee.org/document/8355536">A design for high speed leading-zero counter</a></p><p><a href="https://digitalsystemdesign.in/leading-zero-counter/">Leading Zero Counter：一个比较简明的设计</a></p><pre class="line-numbers language-systemverilog" data-language="systemverilog"><code class="language-systemverilog">// This code is under development and not yet released to the public.// Until it is released, the code is under the copyright of ETH Zurich and// the University of Bologna, and may contain confidential and/or unpublished// work. Any reuse/redistribution is strictly forbidden without written// permission from ETH Zurich.//// Bug fixes and contributions will eventually be released under the// SolderPad open hardware license in the context of the PULP platform// (http://www.pulp-platform.org), under the copyright of ETH Zurich and the// University of Bologna./// A trailing zero counter / leading zero counter./// Set MODE to 0 for trailing zero counter =&gt; cnt_o is the number of trailing zeros (from the LSB)/// Set MODE to 1 for leading zero counter  =&gt; cnt_o is the number of leading zeros  (from the MSB)/// If the input does not contain a zero, `empty_o` is asserted. Additionally `cnt_o` contains/// the maximum number of zeros - 1. For example:///   in_i = 000_0000, empty_o = 1, cnt_o = 6 (mode = 0)///   in_i = 000_0001, empty_o = 0, cnt_o = 0 (mode = 0)///   in_i = 000_1000, empty_o = 0, cnt_o = 3 (mode = 0)/// Furthermore, this unit contains a more efficient implementation for Verilator (simulation only)./// This speeds up simulation significantly.module lzc #(  /// The width of the input vector.  parameter int unsigned WIDTH = 2,  parameter bit          MODE  = 1'b0, // 0 -&gt; trailing zero, 1 -&gt; leading zero  // Dependent parameters. Do not change!  parameter int unsigned CNT_WIDTH = WIDTH == 1 ? 1 : $clog2(WIDTH)) (  input  logic [WIDTH-1:0]     in_i,  output logic [CNT_WIDTH-1:0] cnt_o,  output logic                 empty_o // asserted if all bits in in_i are zero);  if (WIDTH == 1) begin: gen_degenerate_lzc    assign cnt_o[0] = !in_i[0];    assign empty_o  = !in_i[0];  end else begin: gen_lzc    localparam int unsigned NUM_LEVELS = $clog2(WIDTH);    // pragma translate_off    initial begin      assert(WIDTH &gt; 0) else $fatal(1, "input must be at least one bit wide");    end    // pragma translate_on    logic [WIDTH-1:0][NUM_LEVELS-1:0]          index_lut;    logic [2**NUM_LEVELS-1:0]                  sel_nodes;    logic [2**NUM_LEVELS-1:0][NUM_LEVELS-1:0]  index_nodes;    logic [WIDTH-1:0] in_tmp;    // reverse vector if required    always_comb begin : flip_vector      for (int unsigned i = 0; i &lt; WIDTH; i++) begin        in_tmp[i] = (MODE) ? in_i[WIDTH-1-i] : in_i[i];      end    end    for (genvar j = 0; unsigned'(j) &lt; WIDTH; j++) begin : g_index_lut      assign index_lut[j] = (NUM_LEVELS)'(unsigned'(j));    end    for (genvar level = 0; unsigned'(level) &lt; NUM_LEVELS; level++) begin : g_levels      if (unsigned'(level) == NUM_LEVELS-1) begin : g_last_level        for (genvar k = 0; k &lt; 2**level; k++) begin : g_level          // if two successive indices are still in the vector...          if (unsigned'(k) * 2 &lt; WIDTH-1) begin            assign sel_nodes[2**level-1+k]   = in_tmp[k*2] | in_tmp[k*2+1];            assign index_nodes[2**level-1+k] = (in_tmp[k*2] == 1'b1) ? index_lut[k*2] :                                                                       index_lut[k*2+1];          end          // if only the first index is still in the vector...          if (unsigned'(k) * 2 == WIDTH-1) begin            assign sel_nodes[2**level-1+k]   = in_tmp[k*2];            assign index_nodes[2**level-1+k] = index_lut[k*2];          end          // if index is out of range          if (unsigned'(k) * 2 &gt; WIDTH-1) begin            assign sel_nodes[2**level-1+k]   = 1'b0;            assign index_nodes[2**level-1+k] = '0;          end        end      end else begin        for (genvar l = 0; l &lt; 2**level; l++) begin : g_level          assign sel_nodes[2**level-1+l]   = sel_nodes[2**(level+1)-1+l*2] | sel_nodes[2**(level+1)-1+l*2+1];          assign index_nodes[2**level-1+l] = (sel_nodes[2**(level+1)-1+l*2] == 1'b1) ? index_nodes[2**(level+1)-1+l*2] :                                                                                       index_nodes[2**(level+1)-1+l*2+1];        end      end    end    assign cnt_o   = NUM_LEVELS &gt; unsigned'(0) ? index_nodes[0] : {($clog2(WIDTH)){1'b0}};    assign empty_o = NUM_LEVELS &gt; unsigned'(0) ? ~sel_nodes[0]  : ~(|in_i);  end : gen_lzcendmodule : lzc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="rr-arb-tree"><a href="#rr-arb-tree" class="headerlink" title="rr_arb_tree"></a>rr_arb_tree</h2><h2 id="popcount"><a href="#popcount" class="headerlink" title="popcount"></a>popcount</h2><pre class="line-numbers language-verilog" data-language="verilog"><code class="language-verilog"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div align="center" style="zoom:80%"><img src=""></div><br>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="sazc-tech-notes/readme/"/>
      <url>sazc-tech-notes/readme/</url>
      
        <content type="html"><![CDATA[<h1 id="sazc-tech-notes"><a href="#sazc-tech-notes" class="headerlink" title="sazc_tech_notes"></a>sazc_tech_notes</h1><p>记录个人技术笔记的仓库，希望可以帮助到需要的胖友</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
